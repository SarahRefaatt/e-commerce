// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}


// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model users {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  image     String
  createdAt DateTime @default(now())
}

model Customer {
  id               Int       @id @default(autoincrement())
  first_name       String?
  last_name        String?
  email            String?   @unique
  password_hash    String?
  phone_number     String?
  shipping_address String?
  billing_address  String?
  created_at       DateTime  @default(now())
  updated_at       DateTime? @updatedAt

  orders Order[] @relation("custome_order")
  cartid Int?    @unique
  cart   Cart?   @relation("customer_cart", fields: [cartid], references: [id])

  wishlistId Int?      @unique
  wishList   Wishlist? @relation("customer_wishlist", fields: [wishlistId], references: [id])
}

model Product {
  id             Int       @id @default(autoincrement())
  name           String?
  description    String?
  price          String?
  stock_quantity String?
  image_url      String?
  brand          String?
  rating         String?
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt

  categoryid Int?

  category       Category?        @relation("product_belongs_cat", fields: [categoryid], references: [id])
  productVariant ProductVariant[] @relation("product_productvariant")

  cartItems CartItem[] @relation("product_cart")


  WishlistItem WishlistItem[] @relation("product_cart")
}

model ProductVariant {
  id       Int     @id @default(autoincrement())
  color    String?
  size     String?
  quantity Int

  productid Int
  product   Product? @relation("product_productvariant", fields: [productid], references: [id])

  CartItem CartItem[]

  OrderItem OrderItem[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  gender      GENDER?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  product Product[] @relation("product_belongs_cat")
}

enum GENDER {
  MALE
  FEMALE
}

model Cart {
  id         Int      @id @default(autoincrement())
  customerId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  customer Customer? @relation("customer_cart")

  items CartItem[] @relation("product_cart")
}

model CartItem {
  id        Int  @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  variantId Int? // Add this field to track the variant

  cart    Cart            @relation("product_cart", fields: [cartId], references: [id])
  product Product         @relation("product_cart", fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id]) // Add this relation

    @@unique([cartId, productId, variantId], name: "cart_product_variant_unique")

}

model Wishlist {
  id         Int      @id @default(autoincrement())
  customerId Int
  created_at DateTime @default(now())

  customer Customer? @relation("customer_wishlist")

  WishlistItem WishlistItem[] @relation("product_cart")
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  productId  Int
  wishlist   Wishlist @relation("product_cart", fields: [wishlistId], references: [id])
  product    Product  @relation("product_cart", fields: [productId], references: [id])
}

model Order {
  id               Int      @id @default(autoincrement())
  customerId       Int?
  order_date       DateTime @default(now())
  shipping_address String
  billing_address  String
  status           String
  total_amount     Float
  paymentStatus    payment_status

  customer Customer? @relation("custome_order", fields: [customerId], references: [id])

  items OrderItem[]
}

model OrderItem {
  id            Int   @id @default(autoincrement())
  orderId       Int
  product_variantId     Int
  quantity      Int
  price_at_time Float

  order   Order   @relation(fields: [orderId], references: [id])
  product ProductVariant @relation(fields: [product_variantId], references: [id])
}

// model Payment {
//   id             Int      @id @default(autoincrement())
//   order          Order    @relation(fields: [orderId], references: [id])
//   orderId        Int      @unique
//   payment_method String
//   payment_status String
//   payment_date   DateTime @default(now())
// }

enum payment_status {
  DONE
  WAITING
}
